package sample;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.paint.Paint;
import javafx.scene.text.Text;
import javafx.scene.text.TextAlignment;
import javafx.stage.Stage;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.*;

public class Main extends Application {

    private static final Map<String, String> COUNTRIES_STORE;
    private static final List<String> COUNTRIES_ISO_LIST;
    private Integer score = 0;
    private Integer attempts = 0;
    private final HBox hbox = new HBox(10);
    private final HBox hbox2 = new HBox(10);
    private boolean gotIt;

    static {
        COUNTRIES_STORE = new HashMap<>();
        COUNTRIES_ISO_LIST = new ArrayList<>();
        COUNTRIES_ISO_LIST.add("ad");
        COUNTRIES_ISO_LIST.add("ae");
        COUNTRIES_ISO_LIST.add("af");
        COUNTRIES_ISO_LIST.add("ag");
        COUNTRIES_ISO_LIST.add("ai");
        COUNTRIES_ISO_LIST.add("al");
        COUNTRIES_ISO_LIST.add("am");
        COUNTRIES_ISO_LIST.add("ao");
        COUNTRIES_ISO_LIST.add("aq");
        COUNTRIES_ISO_LIST.add("ar");
        COUNTRIES_ISO_LIST.add("as");
        COUNTRIES_ISO_LIST.add("at");
        COUNTRIES_ISO_LIST.add("au");
        COUNTRIES_ISO_LIST.add("aw");
        COUNTRIES_ISO_LIST.add("ax");
        COUNTRIES_ISO_LIST.add("az");
        COUNTRIES_ISO_LIST.add("ba");
        COUNTRIES_ISO_LIST.add("bb");
        COUNTRIES_ISO_LIST.add("bd");
        COUNTRIES_ISO_LIST.add("be");
        COUNTRIES_ISO_LIST.add("bf");
        COUNTRIES_ISO_LIST.add("bg");
        COUNTRIES_ISO_LIST.add("bh");
        COUNTRIES_ISO_LIST.add("bi");
        COUNTRIES_ISO_LIST.add("bj");
        COUNTRIES_ISO_LIST.add("bl");
        COUNTRIES_ISO_LIST.add("bm");
        COUNTRIES_ISO_LIST.add("bn");
        COUNTRIES_ISO_LIST.add("bo");
        COUNTRIES_ISO_LIST.add("bq");
        COUNTRIES_ISO_LIST.add("br");
        COUNTRIES_ISO_LIST.add("bs");
        COUNTRIES_ISO_LIST.add("bt");
        COUNTRIES_ISO_LIST.add("bv");
        COUNTRIES_ISO_LIST.add("bw");
        COUNTRIES_ISO_LIST.add("by");
        COUNTRIES_ISO_LIST.add("bz");
        COUNTRIES_ISO_LIST.add("ca");
        COUNTRIES_ISO_LIST.add("cc");
        COUNTRIES_ISO_LIST.add("cd");
        COUNTRIES_ISO_LIST.add("cf");
        COUNTRIES_ISO_LIST.add("cg");
        COUNTRIES_ISO_LIST.add("ch");
        COUNTRIES_ISO_LIST.add("ci");
        COUNTRIES_ISO_LIST.add("ck");
        COUNTRIES_ISO_LIST.add("cl");
        COUNTRIES_ISO_LIST.add("cm");
        COUNTRIES_ISO_LIST.add("cn");
        COUNTRIES_ISO_LIST.add("co");
        COUNTRIES_ISO_LIST.add("cr");
        COUNTRIES_ISO_LIST.add("cu");
        COUNTRIES_ISO_LIST.add("cv");
        COUNTRIES_ISO_LIST.add("cw");
        COUNTRIES_ISO_LIST.add("cx");
        COUNTRIES_ISO_LIST.add("cy");
        COUNTRIES_ISO_LIST.add("cz");
        COUNTRIES_ISO_LIST.add("de");
        COUNTRIES_ISO_LIST.add("dj");
        COUNTRIES_ISO_LIST.add("dk");
        COUNTRIES_ISO_LIST.add("dm");
        COUNTRIES_ISO_LIST.add("do");
        COUNTRIES_ISO_LIST.add("dz");
        COUNTRIES_ISO_LIST.add("ec");
        COUNTRIES_ISO_LIST.add("ee");
        COUNTRIES_ISO_LIST.add("eg");
        COUNTRIES_ISO_LIST.add("er");
        COUNTRIES_ISO_LIST.add("es");
        COUNTRIES_ISO_LIST.add("et");
        COUNTRIES_ISO_LIST.add("fi");
        COUNTRIES_ISO_LIST.add("fj");
        COUNTRIES_ISO_LIST.add("fk");
        COUNTRIES_ISO_LIST.add("fm");
        COUNTRIES_ISO_LIST.add("fo");
        COUNTRIES_ISO_LIST.add("fr");
        COUNTRIES_ISO_LIST.add("ga");
        COUNTRIES_ISO_LIST.add("gb");
        COUNTRIES_ISO_LIST.add("gd");
        COUNTRIES_ISO_LIST.add("ge");
        COUNTRIES_ISO_LIST.add("gf");
        COUNTRIES_ISO_LIST.add("gg");
        COUNTRIES_ISO_LIST.add("gh");
        COUNTRIES_ISO_LIST.add("gi");
        COUNTRIES_ISO_LIST.add("gl");
        COUNTRIES_ISO_LIST.add("gm");
        COUNTRIES_ISO_LIST.add("gn");
        COUNTRIES_ISO_LIST.add("gp");
        COUNTRIES_ISO_LIST.add("gq");
        COUNTRIES_ISO_LIST.add("gr");
        COUNTRIES_ISO_LIST.add("gs");
        COUNTRIES_ISO_LIST.add("gt");
        COUNTRIES_ISO_LIST.add("gu");
        COUNTRIES_ISO_LIST.add("gw");
        COUNTRIES_ISO_LIST.add("gy");
        COUNTRIES_ISO_LIST.add("hk");
        COUNTRIES_ISO_LIST.add("hm");
        COUNTRIES_ISO_LIST.add("hn");
        COUNTRIES_ISO_LIST.add("hr");
        COUNTRIES_ISO_LIST.add("ht");
        COUNTRIES_ISO_LIST.add("hu");
        COUNTRIES_ISO_LIST.add("id");
        COUNTRIES_ISO_LIST.add("ie");
        COUNTRIES_ISO_LIST.add("il");
        COUNTRIES_ISO_LIST.add("im");
        COUNTRIES_ISO_LIST.add("in");
        COUNTRIES_ISO_LIST.add("io");
        COUNTRIES_ISO_LIST.add("iq");
        COUNTRIES_ISO_LIST.add("ir");
        COUNTRIES_ISO_LIST.add("is");
        COUNTRIES_ISO_LIST.add("it");
        COUNTRIES_ISO_LIST.add("je");
        COUNTRIES_ISO_LIST.add("jm");
        COUNTRIES_ISO_LIST.add("jo");
        COUNTRIES_ISO_LIST.add("jp");
        COUNTRIES_ISO_LIST.add("ke");
        COUNTRIES_ISO_LIST.add("kg");
        COUNTRIES_ISO_LIST.add("kh");
        COUNTRIES_ISO_LIST.add("ki");
        COUNTRIES_ISO_LIST.add("km");
        COUNTRIES_ISO_LIST.add("kn");
        COUNTRIES_ISO_LIST.add("kp");
        COUNTRIES_ISO_LIST.add("kr");
        COUNTRIES_ISO_LIST.add("kw");
        COUNTRIES_ISO_LIST.add("ky");
        COUNTRIES_ISO_LIST.add("kz");
        COUNTRIES_ISO_LIST.add("la");
        COUNTRIES_ISO_LIST.add("lb");
        COUNTRIES_ISO_LIST.add("lc");
        COUNTRIES_ISO_LIST.add("li");
        COUNTRIES_ISO_LIST.add("lk");
        COUNTRIES_ISO_LIST.add("lr");
        COUNTRIES_ISO_LIST.add("ls");
        COUNTRIES_ISO_LIST.add("lt");
        COUNTRIES_ISO_LIST.add("lu");
        COUNTRIES_ISO_LIST.add("lv");
        COUNTRIES_ISO_LIST.add("ly");
        COUNTRIES_ISO_LIST.add("ma");
        COUNTRIES_ISO_LIST.add("mc");
        COUNTRIES_ISO_LIST.add("md");
        COUNTRIES_ISO_LIST.add("me");
        COUNTRIES_ISO_LIST.add("mf");
        COUNTRIES_ISO_LIST.add("mg");
        COUNTRIES_ISO_LIST.add("mh");
        COUNTRIES_ISO_LIST.add("mk");
        COUNTRIES_ISO_LIST.add("ml");
        COUNTRIES_ISO_LIST.add("mm");
        COUNTRIES_ISO_LIST.add("mn");
        COUNTRIES_ISO_LIST.add("mo");
        COUNTRIES_ISO_LIST.add("mp");
        COUNTRIES_ISO_LIST.add("mq");
        COUNTRIES_ISO_LIST.add("mr");
        COUNTRIES_ISO_LIST.add("ms");
        COUNTRIES_ISO_LIST.add("mt");
        COUNTRIES_ISO_LIST.add("mu");
        COUNTRIES_ISO_LIST.add("mv");
        COUNTRIES_ISO_LIST.add("mw");
        COUNTRIES_ISO_LIST.add("mx");
        COUNTRIES_ISO_LIST.add("my");
        COUNTRIES_ISO_LIST.add("mz");
        COUNTRIES_ISO_LIST.add("na");
        COUNTRIES_ISO_LIST.add("nc");
        COUNTRIES_ISO_LIST.add("ne");
        COUNTRIES_ISO_LIST.add("nf");
        COUNTRIES_ISO_LIST.add("ng");
        COUNTRIES_ISO_LIST.add("ni");
        COUNTRIES_ISO_LIST.add("nl");
        COUNTRIES_ISO_LIST.add("no");
        COUNTRIES_ISO_LIST.add("np");
        COUNTRIES_ISO_LIST.add("nr");
        COUNTRIES_ISO_LIST.add("nu");
        COUNTRIES_ISO_LIST.add("nz");
        COUNTRIES_ISO_LIST.add("om");
        COUNTRIES_ISO_LIST.add("pa");
        COUNTRIES_ISO_LIST.add("pe");
        COUNTRIES_ISO_LIST.add("pf");
        COUNTRIES_ISO_LIST.add("pg");
        COUNTRIES_ISO_LIST.add("ph");
        COUNTRIES_ISO_LIST.add("pk");
        COUNTRIES_ISO_LIST.add("pl");
        COUNTRIES_ISO_LIST.add("pm");
        COUNTRIES_ISO_LIST.add("pn");
        COUNTRIES_ISO_LIST.add("pr");
        COUNTRIES_ISO_LIST.add("ps");
        COUNTRIES_ISO_LIST.add("pt");
        COUNTRIES_ISO_LIST.add("pw");
        COUNTRIES_ISO_LIST.add("py");
        COUNTRIES_ISO_LIST.add("qa");
        COUNTRIES_ISO_LIST.add("re");
        COUNTRIES_ISO_LIST.add("ro");
        COUNTRIES_ISO_LIST.add("rs");
        COUNTRIES_ISO_LIST.add("ru");
        COUNTRIES_ISO_LIST.add("rw");
        COUNTRIES_ISO_LIST.add("sa");
        COUNTRIES_ISO_LIST.add("sb");
        COUNTRIES_ISO_LIST.add("sc");
        COUNTRIES_ISO_LIST.add("sd");
        COUNTRIES_ISO_LIST.add("se");
        COUNTRIES_ISO_LIST.add("sg");
        COUNTRIES_ISO_LIST.add("sh");
        COUNTRIES_ISO_LIST.add("si");
        COUNTRIES_ISO_LIST.add("sj");
        COUNTRIES_ISO_LIST.add("sk");
        COUNTRIES_ISO_LIST.add("sl");
        COUNTRIES_ISO_LIST.add("sm");
        COUNTRIES_ISO_LIST.add("sn");
        COUNTRIES_ISO_LIST.add("so");
        COUNTRIES_ISO_LIST.add("sr");
        COUNTRIES_ISO_LIST.add("ss");
        COUNTRIES_ISO_LIST.add("st");
        COUNTRIES_ISO_LIST.add("sv");
        COUNTRIES_ISO_LIST.add("sx");
        COUNTRIES_ISO_LIST.add("sy");
        COUNTRIES_ISO_LIST.add("sz");
        COUNTRIES_ISO_LIST.add("tc");
        COUNTRIES_ISO_LIST.add("td");
        COUNTRIES_ISO_LIST.add("tf");
        COUNTRIES_ISO_LIST.add("tg");
        COUNTRIES_ISO_LIST.add("th");
        COUNTRIES_ISO_LIST.add("tj");
        COUNTRIES_ISO_LIST.add("tk");
        COUNTRIES_ISO_LIST.add("tl");
        COUNTRIES_ISO_LIST.add("tm");
        COUNTRIES_ISO_LIST.add("tn");
        COUNTRIES_ISO_LIST.add("to");
        COUNTRIES_ISO_LIST.add("tr");
        COUNTRIES_ISO_LIST.add("tt");
        COUNTRIES_ISO_LIST.add("tv");
        COUNTRIES_ISO_LIST.add("tw");
        COUNTRIES_ISO_LIST.add("tz");
        COUNTRIES_ISO_LIST.add("ua");
        COUNTRIES_ISO_LIST.add("ug");
        COUNTRIES_ISO_LIST.add("us");
        COUNTRIES_ISO_LIST.add("uy");
        COUNTRIES_ISO_LIST.add("uz");
        COUNTRIES_ISO_LIST.add("va");
        COUNTRIES_ISO_LIST.add("vc");
        COUNTRIES_ISO_LIST.add("ve");
        COUNTRIES_ISO_LIST.add("vg");
        COUNTRIES_ISO_LIST.add("vi");
        COUNTRIES_ISO_LIST.add("vn");
        COUNTRIES_ISO_LIST.add("vu");
        COUNTRIES_ISO_LIST.add("wf");
        COUNTRIES_ISO_LIST.add("ws");
        COUNTRIES_ISO_LIST.add("ye");
        COUNTRIES_ISO_LIST.add("yt");
        COUNTRIES_ISO_LIST.add("za");
        COUNTRIES_ISO_LIST.add("zm");
        COUNTRIES_ISO_LIST.add("zw");

        COUNTRIES_STORE.put("ad", "Andorra");
        COUNTRIES_STORE.put("ae", "United Arab Emirates");
        COUNTRIES_STORE.put("af", "Afghanistan");
        COUNTRIES_STORE.put("ag", "Antigua and Barbuda");
        COUNTRIES_STORE.put("ai", "Anguilla");
        COUNTRIES_STORE.put("al", "Albania");
        COUNTRIES_STORE.put("am", "Armenia");
        COUNTRIES_STORE.put("ao", "Angola");
        COUNTRIES_STORE.put("aq", "Antarctica");
        COUNTRIES_STORE.put("ar", "Argentina");
        COUNTRIES_STORE.put("as", "American Samoa");
        COUNTRIES_STORE.put("at", "Austria");
        COUNTRIES_STORE.put("au", "Australia");
        COUNTRIES_STORE.put("aw", "Aruba");
        COUNTRIES_STORE.put("ax", "Åland Islands");
        COUNTRIES_STORE.put("az", "Azerbaijan");
        COUNTRIES_STORE.put("ba", "Bosnia and Herzegovina");
        COUNTRIES_STORE.put("bb", "Barbados");
        COUNTRIES_STORE.put("bd", "Bangladesh");
        COUNTRIES_STORE.put("be", "Belgium");
        COUNTRIES_STORE.put("bf", "Burkina Faso");
        COUNTRIES_STORE.put("bg", "Bulgaria");
        COUNTRIES_STORE.put("bh", "Bahrain");
        COUNTRIES_STORE.put("bi", "Burundi");
        COUNTRIES_STORE.put("bj", "Benin");
        COUNTRIES_STORE.put("bl", "Saint Barthélemy");
        COUNTRIES_STORE.put("bm", "Bermuda");
        COUNTRIES_STORE.put("bn", "Brunei Darussalam");
        COUNTRIES_STORE.put("bo", "Bolivia (Plurinational State of)");
        COUNTRIES_STORE.put("bq", "Bonaire, Sint Eustatius and Saba");
        COUNTRIES_STORE.put("br", "Brazil");
        COUNTRIES_STORE.put("bs", "Bahamas");
        COUNTRIES_STORE.put("bt", "Bhutan");
        COUNTRIES_STORE.put("bv", "Bouvet Island");
        COUNTRIES_STORE.put("bw", "Botswana");
        COUNTRIES_STORE.put("by", "Belarus");
        COUNTRIES_STORE.put("bz", "Belize");
        COUNTRIES_STORE.put("ca", "Canada");
        COUNTRIES_STORE.put("cc", "Cocos (Keeling) Islands");
        COUNTRIES_STORE.put("cd", "Congo, Democratic Republic of the");
        COUNTRIES_STORE.put("cf", "Central African Republic");
        COUNTRIES_STORE.put("cg", "Congo");
        COUNTRIES_STORE.put("ch", "Switzerland");
        COUNTRIES_STORE.put("ci", "Côte d'Ivoire");
        COUNTRIES_STORE.put("ck", "Cook Islands");
        COUNTRIES_STORE.put("cl", "Chile");
        COUNTRIES_STORE.put("cm", "Cameroon");
        COUNTRIES_STORE.put("cn", "China");
        COUNTRIES_STORE.put("co", "Colombia");
        COUNTRIES_STORE.put("cr", "Costa Rica");
        COUNTRIES_STORE.put("cu", "Cuba");
        COUNTRIES_STORE.put("cv", "Cabo Verde");
        COUNTRIES_STORE.put("cw", "Curaçao");
        COUNTRIES_STORE.put("cx", "Christmas Island");
        COUNTRIES_STORE.put("cy", "Cyprus");
        COUNTRIES_STORE.put("cz", "Czechia");
        COUNTRIES_STORE.put("de", "Germany");
        COUNTRIES_STORE.put("dj", "Djibouti");
        COUNTRIES_STORE.put("dk", "Denmark");
        COUNTRIES_STORE.put("dm", "Dominica");
        COUNTRIES_STORE.put("do", "Dominican Republic");
        COUNTRIES_STORE.put("dz", "Algeria");
        COUNTRIES_STORE.put("ec", "Ecuador");
        COUNTRIES_STORE.put("ee", "Estonia");
        COUNTRIES_STORE.put("eg", "Egypt");
        COUNTRIES_STORE.put("er", "Eritrea");
        COUNTRIES_STORE.put("es", "Spain");
        COUNTRIES_STORE.put("et", "Ethiopia");
        COUNTRIES_STORE.put("fi", "Finland");
        COUNTRIES_STORE.put("fj", "Fiji");
        COUNTRIES_STORE.put("fk", "Falkland Islands (Malvinas)");
        COUNTRIES_STORE.put("fm", "Micronesia (Federated States of)");
        COUNTRIES_STORE.put("fo", "Faroe Islands");
        COUNTRIES_STORE.put("fr", "France");
        COUNTRIES_STORE.put("ga", "Gabon");
        COUNTRIES_STORE.put("gb", "United Kingdom of Great Britain and Northern Ireland");
        COUNTRIES_STORE.put("gd", "Grenada");
        COUNTRIES_STORE.put("ge", "Georgia");
        COUNTRIES_STORE.put("gf", "French Guiana");
        COUNTRIES_STORE.put("gg", "Guernsey");
        COUNTRIES_STORE.put("gh", "Ghana");
        COUNTRIES_STORE.put("gi", "Gibraltar");
        COUNTRIES_STORE.put("gl", "Greenland");
        COUNTRIES_STORE.put("gm", "Gambia");
        COUNTRIES_STORE.put("gn", "Guinea");
        COUNTRIES_STORE.put("gp", "Guadeloupe");
        COUNTRIES_STORE.put("gq", "Equatorial Guinea");
        COUNTRIES_STORE.put("gr", "Greece");
        COUNTRIES_STORE.put("gs", "South Georgia and the South Sandwich Islands");
        COUNTRIES_STORE.put("gt", "Guatemala");
        COUNTRIES_STORE.put("gu", "Guam");
        COUNTRIES_STORE.put("gw", "Guinea-Bissau");
        COUNTRIES_STORE.put("gy", "Guyana");
        COUNTRIES_STORE.put("hk", "Hong Kong");
        COUNTRIES_STORE.put("hm", "Heard Island and McDonald Islands");
        COUNTRIES_STORE.put("hn", "Honduras");
        COUNTRIES_STORE.put("hr", "Croatia");
        COUNTRIES_STORE.put("ht", "Haiti");
        COUNTRIES_STORE.put("hu", "Hungary");
        COUNTRIES_STORE.put("id", "Indonesia");
        COUNTRIES_STORE.put("ie", "Ireland");
        COUNTRIES_STORE.put("il", "Israel");
        COUNTRIES_STORE.put("im", "Isle of Man");
        COUNTRIES_STORE.put("in", "India");
        COUNTRIES_STORE.put("io", "British Indian Ocean Territory");
        COUNTRIES_STORE.put("iq", "Iraq");
        COUNTRIES_STORE.put("ir", "Iran (Islamic Republic of)");
        COUNTRIES_STORE.put("is", "Iceland");
        COUNTRIES_STORE.put("it", "Italy");
        COUNTRIES_STORE.put("je", "Jersey");
        COUNTRIES_STORE.put("jm", "Jamaica");
        COUNTRIES_STORE.put("jo", "Jordan");
        COUNTRIES_STORE.put("jp", "Japan");
        COUNTRIES_STORE.put("ke", "Kenya");
        COUNTRIES_STORE.put("kg", "Kyrgyzstan");
        COUNTRIES_STORE.put("kh", "Cambodia");
        COUNTRIES_STORE.put("ki", "Kiribati");
        COUNTRIES_STORE.put("km", "Comoros");
        COUNTRIES_STORE.put("kn", "Saint Kitts and Nevis");
        COUNTRIES_STORE.put("kp", "Korea (Democratic People's Republic of)");
        COUNTRIES_STORE.put("kr", "Korea, Republic of");
        COUNTRIES_STORE.put("kw", "Kuwait");
        COUNTRIES_STORE.put("ky", "Cayman Islands");
        COUNTRIES_STORE.put("kz", "Kazakhstan");
        COUNTRIES_STORE.put("la", "Lao People's Democratic Republic");
        COUNTRIES_STORE.put("lb", "Lebanon");
        COUNTRIES_STORE.put("lc", "Saint Lucia");
        COUNTRIES_STORE.put("li", "Liechtenstein");
        COUNTRIES_STORE.put("lk", "Sri Lanka");
        COUNTRIES_STORE.put("lr", "Liberia");
        COUNTRIES_STORE.put("ls", "Lesotho");
        COUNTRIES_STORE.put("lt", "Lithuania");
        COUNTRIES_STORE.put("lu", "Luxembourg");
        COUNTRIES_STORE.put("lv", "Latvia");
        COUNTRIES_STORE.put("ly", "Libya");
        COUNTRIES_STORE.put("ma", "Morocco");
        COUNTRIES_STORE.put("mc", "Monaco");
        COUNTRIES_STORE.put("md", "Moldova, Republic of");
        COUNTRIES_STORE.put("me", "Montenegro");
        COUNTRIES_STORE.put("mf", "Saint Martin (French part)");
        COUNTRIES_STORE.put("mg", "Madagascar");
        COUNTRIES_STORE.put("mh", "Marshall Islands");
        COUNTRIES_STORE.put("mk", "North Macedonia");
        COUNTRIES_STORE.put("ml", "Mali");
        COUNTRIES_STORE.put("mm", "Myanmar");
        COUNTRIES_STORE.put("mn", "Mongolia");
        COUNTRIES_STORE.put("mo", "Macao");
        COUNTRIES_STORE.put("mp", "Northern Mariana Islands");
        COUNTRIES_STORE.put("mq", "Martinique");
        COUNTRIES_STORE.put("mr", "Mauritania");
        COUNTRIES_STORE.put("ms", "Montserrat");
        COUNTRIES_STORE.put("mt", "Malta");
        COUNTRIES_STORE.put("mu", "Mauritius");
        COUNTRIES_STORE.put("mv", "Maldives");
        COUNTRIES_STORE.put("mw", "Malawi");
        COUNTRIES_STORE.put("mx", "Mexico");
        COUNTRIES_STORE.put("my", "Malaysia");
        COUNTRIES_STORE.put("mz", "Mozambique");
        COUNTRIES_STORE.put("na", "Namibia");
        COUNTRIES_STORE.put("nc", "New Caledonia");
        COUNTRIES_STORE.put("ne", "Niger");
        COUNTRIES_STORE.put("nf", "Norfolk Island");
        COUNTRIES_STORE.put("ng", "Nigeria");
        COUNTRIES_STORE.put("ni", "Nicaragua");
        COUNTRIES_STORE.put("nl", "Netherlands");
        COUNTRIES_STORE.put("no", "Norway");
        COUNTRIES_STORE.put("np", "Nepal");
        COUNTRIES_STORE.put("nr", "Nauru");
        COUNTRIES_STORE.put("nu", "Niue");
        COUNTRIES_STORE.put("nz", "New Zealand");
        COUNTRIES_STORE.put("om", "Oman");
        COUNTRIES_STORE.put("pa", "Panama");
        COUNTRIES_STORE.put("pe", "Peru");
        COUNTRIES_STORE.put("pf", "French Polynesia");
        COUNTRIES_STORE.put("pg", "Papua New Guinea");
        COUNTRIES_STORE.put("ph", "Philippines");
        COUNTRIES_STORE.put("pk", "Pakistan");
        COUNTRIES_STORE.put("pl", "Poland");
        COUNTRIES_STORE.put("pm", "Saint Pierre and Miquelon");
        COUNTRIES_STORE.put("pn", "Pitcairn");
        COUNTRIES_STORE.put("pr", "Puerto Rico");
        COUNTRIES_STORE.put("ps", "Palestine, State of");
        COUNTRIES_STORE.put("pt", "Portugal");
        COUNTRIES_STORE.put("pw", "Palau");
        COUNTRIES_STORE.put("py", "Paraguay");
        COUNTRIES_STORE.put("qa", "Qatar");
        COUNTRIES_STORE.put("re", "Réunion");
        COUNTRIES_STORE.put("ro", "Romania");
        COUNTRIES_STORE.put("rs", "Serbia");
        COUNTRIES_STORE.put("ru", "Russian Federation");
        COUNTRIES_STORE.put("rw", "Rwanda");
        COUNTRIES_STORE.put("sa", "Saudi Arabia");
        COUNTRIES_STORE.put("sb", "Solomon Islands");
        COUNTRIES_STORE.put("sc", "Seychelles");
        COUNTRIES_STORE.put("sd", "Sudan");
        COUNTRIES_STORE.put("se", "Sweden");
        COUNTRIES_STORE.put("sg", "Singapore");
        COUNTRIES_STORE.put("sh", "Saint Helena, Ascension and Tristan da Cunha");
        COUNTRIES_STORE.put("si", "Slovenia");
        COUNTRIES_STORE.put("sj", "Svalbard and Jan Mayen");
        COUNTRIES_STORE.put("sk", "Slovakia");
        COUNTRIES_STORE.put("sl", "Sierra Leone");
        COUNTRIES_STORE.put("sm", "San Marino");
        COUNTRIES_STORE.put("sn", "Senegal");
        COUNTRIES_STORE.put("so", "Somalia");
        COUNTRIES_STORE.put("sr", "Suriname");
        COUNTRIES_STORE.put("ss", "South Sudan");
        COUNTRIES_STORE.put("st", "Sao Tome and Principe");
        COUNTRIES_STORE.put("sv", "El Salvador");
        COUNTRIES_STORE.put("sx", "Sint Maarten (Dutch part)");
        COUNTRIES_STORE.put("sy", "Syrian Arab Republic");
        COUNTRIES_STORE.put("sz", "Eswatini");
        COUNTRIES_STORE.put("tc", "Turks and Caicos Islands");
        COUNTRIES_STORE.put("td", "Chad");
        COUNTRIES_STORE.put("tf", "French Southern Territories");
        COUNTRIES_STORE.put("tg", "Togo");
        COUNTRIES_STORE.put("th", "Thailand");
        COUNTRIES_STORE.put("tj", "Tajikistan");
        COUNTRIES_STORE.put("tk", "Tokelau");
        COUNTRIES_STORE.put("tl", "Timor-Leste");
        COUNTRIES_STORE.put("tm", "Turkmenistan");
        COUNTRIES_STORE.put("tn", "Tunisia");
        COUNTRIES_STORE.put("to", "Tonga");
        COUNTRIES_STORE.put("tr", "Turkey");
        COUNTRIES_STORE.put("tt", "Trinidad and Tobago");
        COUNTRIES_STORE.put("tv", "Tuvalu");
        COUNTRIES_STORE.put("tw", "Taiwan, Province of China");
        COUNTRIES_STORE.put("tz", "Tanzania, United Republic of");
        COUNTRIES_STORE.put("ua", "Ukraine");
        COUNTRIES_STORE.put("ug", "Uganda");
        COUNTRIES_STORE.put("us", "United States of America");
        COUNTRIES_STORE.put("uy", "Uruguay");
        COUNTRIES_STORE.put("uz", "Uzbekistan");
        COUNTRIES_STORE.put("va", "Holy See");
        COUNTRIES_STORE.put("vc", "Saint Vincent and the Grenadines");
        COUNTRIES_STORE.put("ve", "Venezuela (Bolivarian Republic of)");
        COUNTRIES_STORE.put("vg", "Virgin Islands (British)");
        COUNTRIES_STORE.put("vi", "Virgin Islands (U.S.)");
        COUNTRIES_STORE.put("vn", "Viet Nam");
        COUNTRIES_STORE.put("vu", "Vanuatu");
        COUNTRIES_STORE.put("wf", "Wallis and Futuna");
        COUNTRIES_STORE.put("ws", "Samoa");
        COUNTRIES_STORE.put("ye", "Yemen");
        COUNTRIES_STORE.put("yt", "Mayotte");
        COUNTRIES_STORE.put("za", "South Africa");
        COUNTRIES_STORE.put("zm", "Zambia");
        COUNTRIES_STORE.put("zw", "Zimbabwe");
    }

    @Override
    public void start(Stage primaryStage) throws Exception {

        Set<String> countriesYet = new HashSet<>();
        List<Integer> countriesIndices = new ArrayList<>();
        attempts = 0;
        gotIt = false;

        VBox vbox = new VBox(10);
        vbox.setSpacing(10);
        vbox.setPadding(new Insets(10, 10, 10, 10));

        ImageView[] imageViews1 = getImageViews(this.hbox, countriesYet, countriesIndices);
        ImageView[] imageViews2 = getImageViews(this.hbox2, countriesYet, countriesIndices);

        int questionAndAnswer = new Random().nextInt(4);
        String answer = countriesIndices.get(questionAndAnswer) + "";

        Text correctAnswer = new Text("Correct answer");
        correctAnswer.setTextAlignment(TextAlignment.CENTER);
        Text wrongAnswer = new Text("Wrong answer");
        wrongAnswer.setTextAlignment(TextAlignment.CENTER);
        correctAnswer.setVisible(false);
        wrongAnswer.setVisible(false);
        Label points = new Label(String.format("Total points:%d", score));

        imageViews1[0].setOnMouseClicked(evt -> incrementPoints(imageViews1[0], answer, correctAnswer, wrongAnswer, points));

        imageViews1[1].setOnMouseClicked(evt -> incrementPoints(imageViews1[1], answer, correctAnswer, wrongAnswer, points));

        imageViews2[0].setOnMouseClicked(evt -> incrementPoints(imageViews2[0], answer, correctAnswer, wrongAnswer, points));

        imageViews2[1].setOnMouseClicked(evt -> incrementPoints(imageViews2[1], answer, correctAnswer, wrongAnswer, points));

        Label label = new Label(String.format("Select flag of %s",
                COUNTRIES_STORE.get(
                        COUNTRIES_ISO_LIST.get(countriesIndices.get(questionAndAnswer)))));

        Button button = new Button("Skip / Next");
        button.setOnAction(evt -> {
            try {
                start(primaryStage);
            } catch (Exception e) {
                e.printStackTrace();
            }
        });

        vbox.getChildren().addAll(this.hbox, this.hbox2, label, correctAnswer, wrongAnswer, points, button);
        vbox.setAlignment(Pos.CENTER);
        primaryStage.setTitle("Countries Quiz");
        Scene scene = new Scene(vbox, 500, 400);
        scene.setFill(Paint.valueOf("Black"));
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    private ImageView[] getImageViews(HBox hboxL, Set<String> countriesYet, List<Integer> countriesIndices) throws FileNotFoundException {
        ImageView imgVw = generateRandomCountryCode(countriesYet, countriesIndices);
        ImageView imgVw2 = generateRandomCountryCode(countriesYet, countriesIndices);
        ImageView[] imageViews = new ImageView[]{imgVw, imgVw2};
        hboxL.getChildren().clear();
        hboxL.setAlignment(Pos.CENTER);
        hboxL.getChildren().addAll(imageViews[0], imageViews[1]);
        return imageViews;
    }

    private void incrementPoints(ImageView radioButton1, String answer, Text correctAnswer, Text wrongAnswer, Label points) {
        if (!gotIt) {
            attempts++;
            if (radioButton1.getAccessibleText().equals(answer)) {
                correctAnswer.setVisible(true);
                correctAnswer.setFill(Color.DARKGREEN);
                wrongAnswer.setVisible(false);
                if (attempts == 1) {
                    score++;
                    attempts = 0;
                    points.setText(String.format("Total points:%d", score));
                    gotIt = true;
                }
            } else {
                wrongAnswer.setVisible(true);
                wrongAnswer.setText("Wrong answer".concat("!".repeat(attempts)));
                wrongAnswer.setFill(Color.RED);
                correctAnswer.setVisible(false);
            }
        }
    }

    private ImageView getImageView(String countryCode1) throws FileNotFoundException {
        Image image = new Image(new FileInputStream("src/countries_big/".concat(countryCode1).concat(".png")), 100, 100, true, true);
        return new ImageView(image);
    }

    private ImageView generateRandomCountryCode(Set<String> countriesYet, List<Integer> countriesIndices) throws FileNotFoundException {
        String countryCode = "";
        int randomCountryIndex = 0;
        while (countryCode.equals("") || countriesYet.contains(countryCode)) {
            randomCountryIndex = new Random().nextInt(247);
//            System.out.println("randomCountryIndex:" + randomCountryIndex);
//            System.out.println(COUNTRIES_ISO_LIST.get(randomCountryIndex));
            countryCode = COUNTRIES_ISO_LIST.get(randomCountryIndex) + "";
        }

        ImageView imgVw = getImageView(countryCode);
        imgVw.setAccessibleText(randomCountryIndex + "");
        countriesYet.add(countryCode);
        countriesIndices.add(randomCountryIndex);
        return imgVw;
    }


    public static void main(String[] args) {
        launch(args);
    }
}
